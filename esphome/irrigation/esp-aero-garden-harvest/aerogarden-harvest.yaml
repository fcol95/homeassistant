esphome:
  name: aerogarden-harvest
  friendly_name: aerogarden-harvest
  on_boot:
    priority: 600 # Needs to be before wifi activation!
    then:
      - delay: 2s # Wait for the secondary MCU to boot up before drawing too much current!
      - logger.log: "AeroGarden Harvest booted!"
      - script.execute: food_missing_time_check

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: esp-idf
    version: latest

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

mdns:

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

wifi:
  networks:
    - ssid: !secret main_wifi_ssid
      password: !secret main_wifi_password
    - ssid: !secret secondary_wifi_ssid
      password: !secret secondary_wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}
    password: !secret fallback_hotspot_password

captive_portal:

time:
  - platform: homeassistant
    id: hass_time
    on_time:
      # Pump Cycle as per the original AeroGarden Harvest schedule.
      # Every 30 minutes activate the pump for 5min (25min off, 5min on!).
      - seconds: 0
        minutes: /30
        then:
          - if:
              condition:
                and:
                  - switch.is_on: switch_plant_present
                  - binary_sensor.is_on: water_present_switch
              then:
                - sprinkler.start_full_cycle: irrigation_ctrlr
              else:
                - logger.log: "Skipping pump cycle!"
      # Food Cycle as per the original AeroGarden Harvest schedule.
      # Every 14 days after reset. Checking every half day!
      - seconds: 0
        minutes: 0
        hours: /12
        then:
          script.execute: food_missing_time_check

script:
  - id: food_missing_time_check
    then:
      - if:
          condition:
            lambda: |- # Check if food has not been reset for more than 14 days!
              return ((id(hass_time).now().timestamp - id(last_food_added_datetime).state_as_esptime().timestamp) >= 14*24*60*60);
          then:
            - lambda: |- # Set food missing state!
                id(food_missing).publish_state(true);
          else:
            - lambda: |- # Clear food missing state!
                id(food_missing).publish_state(false);

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: uptime
    name: "Uptime"
    id: sensor_uptime
    type: seconds
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: uptime
    id: uptime_timestamp
    type: timestamp
    internal: true

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: "diagnostic"
    ssid:
      name: "Connected SSID"
      entity_category: "diagnostic"
    mac_address:
      name: "MAC Address"
      entity_category: "diagnostic"
  - platform: sun
    name: Sun Next Sunrise
    type: sunrise
  - platform: sun
    name: Sun Next Sunset
    type: sunset

datetime:
  - platform: template
    type: datetime
    name: "Last Food Added"
    id: last_food_added_datetime
    icon: "mdi:cookie-clock-outline"
    time_id: hass_time
    restore_value: true
    optimistic: true

  - platform: template
    type: datetime
    name: "Last Planted"
    id: last_planted_datetime
    icon: "mdi:sort-clock-descending-outline"
    time_id: hass_time
    restore_value: true
    optimistic: true

# NOTE: AeroGarden Harvest Touch/Capacity Buttons are read by a secondary MCU with touch input that communicates over I2C.
# PDA -> Clock (Control Board Connector P1 Pin #5), PCK -> Data (Control Board Connector P1 Pin #6).
# Slave Address: 0x50.
# Sequence: Start. Write byte 0x0. ACK. Read byte. NAK. Stop
# If byte is 0, idle, if bit 2 is 1, lamp button is pressed. If bit 0 is 1, food button is pressed.
# CLK ~7kHz. Data on rising edge. Polling every 10ms.
i2c:
  scl: GPIO13
  sda: GPIO12
  scan: false
  frequency: 10kHz # Try 7kHz?

i2c_device:
  id: i2c_touch_mcu
  address: 0x50

interval:
  - interval: 10ms
    id: interval_i2c_comm
    then:
      - lambda: |-
          auto b = id(i2c_touch_mcu).read_byte(0x50);
          id(button_lamp).publish_state(b.value() & 0b00000100); // Lamp button state
          id(button_food).publish_state(b.value() & 0b00000001); // Food button state

button:
  - platform: template
    name: "Reset Plant Food"
    id: button_reset_food
    icon: "mdi:leaf"
    on_press:
      - logger.log: "Plant Food Reset Requested!"
      - lambda: |- # Reset food missing state!
          id(food_missing).publish_state(false);

  - platform: restart
    name: Restart
    entity_category: "diagnostic"

binary_sensor:
  # TODO: Add filters for button presses to avoid false positives?
  - platform: template
    name: "Button Plant Food"
    id: button_food
    on_click:
      - min_length: 3000ms
        max_length: 10000ms
        then:
          - if:
              condition:
                switch.is_on: switch_plant_present
              then:
                - logger.log: "Plant Food Button Long Press!"
                - lambda: |- # Reset food missing state!
                    id(food_missing).publish_state(false);
      - min_length: 100ms
        max_length: 1000ms
        then: # Pump Sanity Check
          - logger.log: "Plant Food Button Short Press!"
          - sprinkler.start_full_cycle: irrigation_ctrlr
          - delay: 5s
          - sprinkler.shutdown: irrigation_ctrlr # Stop the pump if water is low!

  - platform: template
    name: "Button Plant Lamp"
    id: button_lamp
    on_click:
      - min_length: 3000ms
        max_length: 10000ms
        then:
          - logger.log: "Plant Lamp Button Long Press!"
          - switch.toggle: switch_plant_present
      - min_length: 100ms
        max_length: 1000ms
        then:
          - logger.log: "Plant Lamp Button Short Press!"
          - light.toggle: plant_lamp

  - platform: gpio
    pin:
      number: GPIO11 # SW1 Pin 1 (Not GND plane pin!)
      mode:
        input: true
        pullup: true
    name: "Water Present Switch"
    id: water_present_switch
    device_class: moisture
    on_press:
      then:
        - logger.log: "Water refilled!"
        - light.turn_off: led_water_low
        - light.turn_on: led_water_high
    on_release:
      then:
        - sprinkler.shutdown: irrigation_ctrlr # Stop the pump if water is low!
        - logger.log: "Water Low!"
        - light.turn_off: led_water_high
        - light.turn_on: led_water_low

  - platform: template
    name: "Food Missing"
    id: food_missing
    device_class: problem
    icon: "mdi:leaf-off"
    on_press:
      then:
        - logger.log: "Food Missing!"
        - light.turn_off: led_food_high
        - light.turn_on: led_food_low
    on_release:
      then:
        - logger.log: "Food Present!"
        - light.turn_off: led_food_low
        - light.turn_on: led_food_high
        - datetime.datetime.set: # Reset last food added datetime to now!
            id: last_food_added_datetime
            datetime: !lambda |-
              return id(hass_time).now();

output:
  - platform: gpio
    id: out_led_food_low
    pin: GPIO10 # R1 Resistor
  - platform: gpio
    id: out_led_food_high
    pin: GPIO9 # R10 Resistor
  - platform: gpio
    id: out_led_water_low
    pin: GPIO8 # R2 Resistor
  - platform: gpio
    id: out_led_water_high
    pin: GPIO7 # R11 Resistor
  - platform: gpio
    id: out_led_plant_lamp_state
    pin: GPIO6 # R3 Resistor
  - platform: ledc
    id: out_plant_lamp # Check if 3.3V out is enough for driving this.
    pin: GPIO5 # CN1 pin 5 (- symbol wire)
    frequency: 1000Hz # 120Hz from Aerogarden Extrem Config. 1kHz seems to have less flicker
    channel: 2
  - platform: ledc
    id: out_pump_h_plus
    pin: GPIO4 # CN1 pin 2
    frequency: 60Hz
    channel: 0 # Need to be the even adjacent to H- channel for phase control!
    phase_angle: 0.0
    zero_means_zero: true
  - platform: ledc
    id: out_pump_h_minus
    pin: GPIO2 # CN1 pin 1
    frequency: 60Hz
    channel: 1 # Need to be the odd adjacent to H+ channel for phase control!
    phase_angle: 180.0
    zero_means_zero: true

switch:
  - platform: template
    name: "Water Pump"
    id: water_pump
    internal: true
    restore_mode: DISABLED
    assumed_state: true
    optimistic: true
    turn_on_action:
      - output.turn_on: out_pump_h_plus
      - output.turn_on: out_pump_h_minus
      - output.set_level:
          id: out_pump_h_plus
          level: 50%
      - output.set_level:
          id: out_pump_h_minus
          level: 50%
    turn_off_action:
      - output.set_level:
          id: out_pump_h_plus
          level: 0%
      - output.set_level:
          id: out_pump_h_minus
          level: 0%
      - output.turn_off: out_pump_h_plus
      - output.turn_off: out_pump_h_minus

  - platform: template
    name: "Plant Present"
    id: switch_plant_present
    icon: "mdi:sprout"
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    turn_on_action:
      - logger.log: "Plant Present Activated!"
      - datetime.datetime.set: # Reset last planted datetime to now!
          id: last_planted_datetime
          datetime: !lambda |-
            return id(hass_time).now();
      - if:
          condition:
            lambda: |-
              return (!!!id(food_missing).state);
          then:
            - light.turn_off: led_food_low
            - light.turn_on: led_food_high
          else:
            - light.turn_off: led_food_high
            - light.turn_on: led_food_low
      - if:
          condition:
            lambda: |-
              return (id(water_present_switch).state);
          then:
            - light.turn_off: led_water_low
            - light.turn_on: led_water_high
          else:
            - light.turn_off: led_water_high
            - light.turn_on: led_water_low

    turn_off_action:
      - logger.log: "Plant Present Deactivated!"
      - datetime.datetime.set: # Reset last planted datetime to never!
          id: last_planted_datetime
          datetime:
            year: 1970
            month: 1
            day: 1
            hour: 0
            minute: 0
            second: 0
      - light.turn_off: led_food_low
      - light.turn_off: led_food_high
      - light.turn_off: led_water_low
      - light.turn_off: led_water_high
      - light.turn_off: led_plant_lamp_state
      - light.turn_off: plant_lamp
      - sprinkler.shutdown: irrigation_ctrlr

light:
  # Front Panel LEDs (Internally Controlled)
  - platform: binary
    name: "Led Plant Food Low"
    id: led_food_low
    output: out_led_food_low
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true
  - platform: binary
    name: "Led Plant Food High"
    id: led_food_high
    output: out_led_food_high
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true
  - platform: binary
    name: "Led Water Low"
    id: led_water_low
    output: out_led_water_low
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true
  - platform: binary
    name: "Led Water High"
    id: led_water_high
    output: out_led_water_high
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true
  - platform: binary
    name: "Led Plant Lamp State"
    id: led_plant_lamp_state
    output: out_led_plant_lamp_state
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true

  # Main Plant Lamp
  - platform: monochromatic
    id: plant_lamp
    name: "Plant Lamp"
    output: out_plant_lamp
    default_transition_length: 1s
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - logger.log: "Plant Lamp Turned On!"
      - light.turn_on: led_plant_lamp_state
    on_turn_off:
      - logger.log: "Plant Lamp Turned Off!"
      - light.turn_off: led_plant_lamp_state

sun:
  latitude: -0.1862502° # Somewhere sunny!
  longitude: -78.5953483°

  on_sunrise:
    - if:
        condition:
          switch.is_on: switch_plant_present
        then:
          - light.turn_on: plant_lamp
        else:
          - logger.log: "Skipping lamp cycle!"

  on_sunset:
    - then:
        - logger.log: "Good evening!"
        - light.turn_off: plant_lamp

sprinkler:
  - id: irrigation_ctrlr
    valves:
      - valve_switch: "Plant Water"
        run_duration: 300s
        valve_switch_id: water_pump
