esphome:
  name: ${device_name}
  friendly_name: ${device_friendly_name}

esp8266:
  board: esp8285
  restore_from_flash: true
  early_pin_init: false
  framework:
    version: latest

logger:

# Enable Home Assistant API
api:
  encryption:
    key: ${device_api_encryption_key}

ota:
  - platform: esphome
    password: ${device_ota_password}
    # safe_mode: false

mdns:

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

wifi:
  networks:
    - ssid: !secret main_wifi_ssid
      password: !secret main_wifi_password
    - ssid: !secret secondary_wifi_ssid
      password: !secret secondary_wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}
    password: !secret fallback_hotspot_password

captive_portal:

globals:
  - id: my_global_mode
    type: bool
    restore_value: no
    initial_value: "true"

interval:
  - interval: 1s
    then:
      - lambda:
          |- # Custom lambda from Aiyato to allow to reset the device WIFI config to AP and spawn the webserver after three consecutive power cycle of the bulb. Remove and replace by captive portal or ota safe mode with reduced num_attempts instead?
          static uint32_t cnt = 0;
          static int flag = 0;
          static ESPPreferenceObject pref = global_preferences->make_preference<uint32_t>(23332500UL, true);
          if ((flag == 1) && (network::is_connected()))
          {
              flag = 0;
              ESP.restart();
          }
          if (cnt == 0)
          {
              cnt++;
              uint32_t val = 0;
              pref.load(&val);
              val += 1;
              pref.save(&val);
              global_preferences->sync();
              if (val >= 3)
              {
                  my_global_mode->value() = false;
              }
          }
          else if (cnt < 5)
          {
              cnt++;
              if (cnt == 5)
              {
                  uint32_t val = 0;
                  pref.save(&val);
                  global_preferences->sync();
              }
          }
          if (!my_global_mode->value())
          {
              if (cnt == 1)
              {
                  char a[] = "000000";
                  char b[] = "000000";
                  wifi_wificomponent_id->clear_sta();
                  wifi_wificomponent_id->save_wifi_sta(a, b);
                  wifi::WiFiAP wifi_wifiap = wifi::WiFiAP();
                  wifi_wificomponent_id->set_ap(wifi_wifiap);
                  wifi_wificomponent_id->set_ap_timeout(5000);
                  flag = 1;
                  rgbww_rgbwwlightoutput_id->set_color_interlock(false);
              }
              static int state = 0;
              auto call = id(my_light).turn_on();
              call.set_transition_length(1000);
              call.set_brightness(1.0);
              if (state == 0)
              {
                  call.set_rgb(1.0, 0.0, 0.0);
                  call.set_cold_white(0.0);
                  call.set_warm_white(0.0);
              }
              else if (state == 3)
              {
                  call.set_rgb(0.0, 1.0, 0.0);
              }
              else if (state == 5)
              {
                  call.set_rgb(0.0, 0.0, 1.0);
              }
              else if (state == 7)
              {
                  call.set_color_brightness(0.0);
                  call.set_cold_white(1.0);
                  call.set_warm_white(0.0);
              }
              else if (state == 9)
              {
                  call.set_cold_white(0.0);
                  call.set_warm_white(1.0);
              }
              else if (state == 11)
              {
                  call.set_color_brightness(1.0);
                  call.set_rgb(0.0, 1.0, 0.0);
                  call.set_cold_white(0.0);
                  call.set_warm_white(0.0);
              }
              call.perform();
              state += 1;
              if (state == 12)
              {
                  my_global_mode->value() = true;
              }
          }

binary_sensor:
  - platform: status
    name: "Status"
    entity_category: "diagnostic"

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: uptime
    name: "Uptime"
    id: sensor_uptime
    update_interval: 300s
    entity_category: "diagnostic"

button:
  - platform: restart
    name: "Restart"

output:
  - platform: esp8266_pwm
    id: red_output
    pin: GPIO12
  - platform: esp8266_pwm
    id: green_output
    pin: GPIO14
  - platform: esp8266_pwm
    id: blue_output
    pin: GPIO5
  - platform: esp8266_pwm
    id: cold_white_output
    pin: GPIO4
  - platform: esp8266_pwm
    id: warm_white_output
    pin: GPIO13

light:
  - platform: rgbww
    name: "Light"
    restore_mode: "${light_restore_mode}"
    red: red_output
    green: green_output
    blue: blue_output
    cold_white: cold_white_output
    warm_white: warm_white_output
    cold_white_color_temperature: 6000 K
    warm_white_color_temperature: 3000 K
    color_interlock: true
    id: my_light

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: "diagnostic"
    ssid:
      name: "Connected SSID"
      entity_category: "diagnostic"
    mac_address:
      name: "MAC Address"
      entity_category: "diagnostic"
