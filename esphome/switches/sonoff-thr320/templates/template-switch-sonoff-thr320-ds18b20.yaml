# Sonoff THR320 Smart Monitoring Switch
# This assumes you're using a DS18B20 temperature sensor connected to user RJ9 port.
esphome:
  name: ${device_name}
  friendly_name: ${device_friendly_name}
  on_boot:
    - priority: 800
      then:
        # Make sure the relay is in a known state at startup
        - switch.turn_off: relay
        # Default to running the climate control in Home mode
        - climate.control:
            id: climate_control
            preset: "Home"

esp32:
  board: nodemcu-32s

logger:

# Enable Home Assistant API
api:
  encryption:
    key: ${device_api_encryption_key}

ota:
  - platform: esphome
    password: ${device_ota_password}

mdns:

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

wifi:
  networks:
  - ssid: !secret main_wifi_ssid
    password: !secret main_wifi_password
  - ssid: !secret secondary_wifi_ssid
    password: !secret secondary_wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}
    password: !secret fallback_hotspot_password

captive_portal:

time:
  - platform: homeassistant
    id: ha_time

# External User 1-Wire Bus of RJ9 Port
one_wire:
  - platform: gpio
    pin: GPIO25

sensor:
  # External User 1-Wire Sensor Connected to RJ9 Port
  - platform: dallas_temp
    name: "Temperature"
    id: temp
    device_class: temperature
    unit_of_measurement: °C
    update_interval: 15s

  - platform: template
    name: "ESP32 Internal Temp"
    id: esp32_temp
    device_class: temperature
    unit_of_measurement: °C
    lambda: return temperatureRead();

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: uptime
    id: uptime_sensor
    internal: True
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

binary_sensor:
  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    on_click:
      - max_length: 350ms # short press to toggle the relay
        then:
          # Turn off climate control
          - climate.control:
              id: climate_control
              mode: "OFF"
          - switch.toggle: relay
      - min_length: 360ms # long press to toggle climate control
        max_length: 3s
        then:
          - if:
              condition:
                lambda: |-
                  return id(climate_control).mode == CLIMATE_MODE_OFF;
              then:
                # We need to turn off realy due to a bug in the climate
                # component. If the relay is on and climate control is
                # turned on in idle mode (target temp < set temp) the relay
                # will not be turned off automatically. It works fine if
                # the climate control is turned on in heat mode (target temp >
                # set temp), i.e. the relay will be turned on.
                - switch.turn_off: relay
                - climate.control:
                    id: climate_control
                    mode: "HEAT"
              else:
                climate.control:
                  id: climate_control
                  mode: "OFF"
switch:
  # virtual switch to represent the main relay
  # As far as I know, we have no way to confirm the real state
  - platform: template
    id: relay
    name: "Relay"
    turn_on_action:
      - switch.turn_on: relay_on_switch
      - light.turn_on: relay_led
    turn_off_action:
      - switch.turn_on: relay_off_switch
      - light.turn_off: relay_led
    assumed_state: True
    optimistic: True
    restore_mode : ALWAYS_OFF
  # Internal momentary switch for relay ON
  - platform: gpio
    id: relay_on_switch
    internal: True
    pin:
      number: GPIO19
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: relay_on_switch
    restore_mode: ALWAYS_OFF
  # internal momentary switch for relay OFF
  - platform: gpio
    id: relay_off_switch
    internal: True
    pin:
      number: GPIO22
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: relay_off_switch
    restore_mode: ALWAYS_OFF

  - platform: restart
    name: Restart
    
  # This is needed to power the external sensor.
  # It receives 3v3 from this pin, which is pulled up on boot.
  - platform: gpio
    pin: GPIO27
    id: sensor_power
    restore_mode: ALWAYS_ON

light:
  - platform: status_led
    id: relay_led
    internal: True
    pin:
      number: GPIO16 # Left Most Led - "On/Off Led"
      inverted: True
  - platform: status_led
    id: wifi_status_led
    internal: True
    pin:
      number: GPIO15 # Middle Led - "Wifi State Led"
      inverted: True
  - platform: status_led
    id: climate_state_led
    internal: True
    pin:
      number: GPIO13 # Right Most Led - "AUTO Led" 
      inverted: True

interval:
  - interval: 30s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - light.turn_on: wifi_status_led
        else:
          - light.turn_off: wifi_status_led

climate:
  - platform: thermostat
    id: climate_control
    name: Climate Control
    sensor: temp
    min_heating_off_time: 5s
    min_heating_run_time: 5s
    min_idle_time: 5s
    heat_deadband: 2
    heat_action:
      - switch.turn_on: relay
    idle_action:
      - switch.turn_off: relay
    off_mode:
      - switch.turn_off: relay
    default_preset: Home
    preset:
      - name: Home
        default_target_temperature_low: ${device_climate_default_temp}
    visual:
      min_temperature: ${device_climate_min_temp}
      max_temperature: ${device_climate_max_temp}
      temperature_step: ${device_climate_step_temp}
    on_state:
      - if:
          condition:
            lambda: |-
              return id(climate_control).mode == CLIMATE_MODE_OFF;
          then:
            - light.turn_off: climate_state_led
      - if:
          condition:
            lambda: |-
              return id(climate_control).mode == CLIMATE_MODE_HEAT;
          then:
            - light.turn_on: climate_state_led


text_sensor:
  - platform: template
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start
    entity_category: "diagnostic"
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: "diagnostic"
    ssid:
      name: "Connected SSID"
      entity_category: "diagnostic"
    mac_address:
      name: "MAC Address"
      entity_category: "diagnostic"
